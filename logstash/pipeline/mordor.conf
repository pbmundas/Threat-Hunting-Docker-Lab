input {
  file {
    path => "/mordor/*.json"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/sincedb_mordor"
    codec => "json"
  }
}

filter {
  # If Mordor JSON format has nested event fields, adapt here.
  # Example: ensure timestamp parsing if field named "timestamp" exists
  if [timestamp] {
    date {
      match => ["timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "UNIX"]
      target => "@timestamp"
    }
  }

  # Normalize fields from Mordor schema (example)
  mutate {
    rename => { "source_ip" => "src.ip" }
    rename => { "dest_ip" => "dest.ip" }
    rename => { "user" => "user.name" }
  }

  # add index name field depending on dataset (optional)
  mutate {
    add_field => { "[@metadata][target_index]" => "mordor-%{+YYYY.MM.dd}" }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{[@metadata][target_index]}"
    # user/password omitted because xpack.security disabled in compose
  }
  stdout { codec => rubydebug }
}
